remoteFunction('var __gridlist=function(b){function A(a){this._viewlist=null;this._viewlistcnt=-1;this._selectedrow=null;this._tabidx=this._rowcnt=this._colcnt=-1;this._resizeFlag=!1;this._limittitleelementwidth=[];this._datarowwidth=this._datalistwidth=this._limitdatarowwidth=this._limitdataelementwidth=this._limittitlerowwidth=0;this._arrdataelementwidth=[];this._lastonmousemoveevent=document.onmousemove;this._lastonmouseupevent=document.onmouseup;this._listtype=a.listtype;this._tblid=a.tblid;this._tbltitleid=a.tbltitleid;this._titlelistid=a.titlelistid;this._titlerowid=a.titlerowid;this._titleelementid=a.titleelementid;this._titledividerid=a.titledividerid;this._titlelistcn=a.titlelistcn;this._titlerowcn=a.titlerowcn;this._titleelementcn=a.titleelementcn;this._titledividercn=a.titledividercn;this._tblbodyid=a.tblbodyid;this._datalistid=a.datalistid;this._datarowid=a.datarowid;this._dataelementid=a.dataelementid;this._datalistcn=a.datalistcn;this._datarowcn=a.datarowcn;this._dataelementcn=a.dataelementcn;this._dataselectcn=a.dataselectcn}A.prototype={setViewList:function(a){this._viewlist=a},getViewList:function(){return this._viewlist},setViewListCnt:function(a){this._viewlistcnt=a},getViewListCnt:function(){return this._viewlistcnt},setRowCnt:function(a){this._rowcnt=a},getRowCnt:function(){return this._rowcnt},setColCnt:function(a){this._colcnt=a},getColCnt:function(){return this._colcnt},setTabIdx:function(a){this._tabidx=a},getTabIdx:function(){return this._tabidx},setDataListWidth:function(a){this._datalistwidth=a},getDataListWidth:function(){return this._datalistwidth},setDataRowWidth:function(a){this._datarowwidth=a},getDataRowWidth:function(){return this._datarowwidth},setDataElementWidth:function(a,b){this._arrdataelementwidth[a]=b},getDataElementWidth:function(a){return this._arrdataelementwidth[a]},getLimitTitleRowWidth:function(){return this._limittitlerowwidth},getLimitTitleElementWidth:function(a){return this._limittitleelementwidth[a-1]},getLimitDataRowWidth:function(){return this._limitdatarowwidth},getLimitDataElementWidth:function(){return this._limitdataelementwidth},getResizeFlag:function(){return this._resizeFlag},getLastOnMouseMoveEvent:function(){return this._lastonmousemoveevent},getLastOnMouseUpEvent:function(){return this._lastonmouseupevent},getListTypeID:function(){return this._listtype},getTitleListID:function(){return this._titlelistid},getTitleRowID:function(){return this._titlerowid},getTitleElementID:function(){return this._titleelementid},getDividerID:function(){return this._titledividerid},getDataListID:function(){return this._datalistid},getDataRowID:function(){return this._datarowid},getDataElementID:function(){return this._dataelementid},getSelectedRow:function(){return this._selectedrow},focusOnRow:function(a){if(!a)return!1;var m=a.childNodes.length,e=-1;if(this._selectedrow){for(var e=this._selectedrow.getAttribute("tabindex"),d=0;d<m;d++)"certslist"==this.getListTypeID()?this._selectedrow.childNodes[d].className=this._dataelementcn+" grid-element"+(d+1):this._selectedrow.childNodes[d].className=this._dataelementcn;this._selectedrow.setAttribute("aria-selected","false",0);this._selectedrow.removeAttribute("tabindex")}for(d=0;d<m;d++)"certslist"==this.getListTypeID()?a.childNodes[d].className=this._dataselectcn+" grid-element"+(d+1):a.childNodes[d].className=this._dataselectcn;a.setAttribute("aria-selected","true",0);-1<e&&(a.setAttribute("tabindex",e,0),a.focus());this._selectedrow=a;if(null!=document.getElementById("us-div-cert-manage-detail")&&"none"!=document.getElementById("us-div-cert-manage-detail").style.display){if("undefined"==this.getSelectedIndex())return;a=this.getSelectedIndex();b.certsList&&b.certsList.list&&null!=b.certsList.list[a-1]&&null!=b.certsList.list[a-1].cert&&(b.usWebToolkit.x509Certificate.parser(b.certsList.list[a-1].cert,"Base64"),document.getElementById("us-layout-cert-manage-detail-box-subject").innerHTML="<b>"+b.certUtil().getCN(b.usWebToolkit.x509Certificate.getSubjectName())+"</b>",document.getElementById("us-layout-cert-manage-detail-box-expire-data").innerHTML=b.certUtil().getLocalDate(b.usWebToolkit.x509Certificate.getNotBefore())+" ~ "+b.certUtil().getLocalDate(b.usWebToolkit.x509Certificate.getNotAfter()))}return!0},getRowForFocusing:function(a,b){if(!a||!b)return null;var e=a||window.event,d=e.which||e.keyCode,e=parseInt(b.parentNode.childNodes.length);if(38===d){if(d=b.id.split(this._datarowid),d=parseInt(d[1])-1,!(0>=d))return e=this._datarowid+d,e=document.getElementById(e)}else if(40===d&&(d=b.id.split(this._datarowid),d=parseInt(d[1])-1,!(d>=e-1||d>=this._viewlistcnt-1)))return e=this._datarowid+(d+2),e=document.getElementById(e);return null},getSelectedIndex:function(){if(!this._selectedrow)return-1;var a=this._selectedrow.childNodes.length;return a=this._selectedrow.childNodes[a-1].firstChild.nodeValue},drawListTitle:function(a,m,e){if(!a||0>=m)return!1;this._colcnt=m;this._resizeFlag=e;e=document.createElement("DIV");e.setAttribute("id",this._titlelistid,0);e.className=this._titlelistcn;document.getElementById(this._tbltitleid).appendChild(e);m=document.createElement("DIV");m.setAttribute("id",this._titlerowid,0);m.className=this._titlerowcn;e.appendChild(m);e=b.uiUtil().getNumSize(b.uiUtil().getStyle(e,"width","width"));for(var d=e/this._colcnt,t=b.uiUtil().getNumSize(b.uiUtil().getStyle(m,"height","height")),p=0,c=0;c<this._colcnt;c++){var f=document.createElement("DIV");f.setAttribute("id",this._titleelementid+(c+1),0);m.appendChild(f);"certslist"==this.getListTypeID()?(f.className="grid-element"+(c+1),p=b.uiUtil().getNumSize(b.uiUtil().getStyle(f,"width","width")),f.className=this._titleelementcn+" grid-element"+(c+1)):f.className=this._titleelementcn;f.appendChild(document.createTextNode(a[c].title));var g=b.uiUtil().getNumSize(b.uiUtil().getStyle(f,"paddingLeft","padding-left")),n=b.uiUtil().getNumSize(b.uiUtil().getStyle(f,"paddingRight","padding-right")),k=b.uiUtil().getNumSize(b.uiUtil().getStyle(f,"paddingTop","padding-top")),q=b.uiUtil().getNumSize(b.uiUtil().getStyle(f,"paddingBottom","padding-bottom")),k=t-(k+q),q=d-(g+n),w=0;0<p&&(w=p-(g+n));"detailslist"==this._listtype&&(q=0===c?q-q/2+10:q+q/2-10);g=0;this._resizeFlag&&(g=document.createElement("DIV"),g.setAttribute("id",this._titledividerid+(c+1),0),g.className=this._titledividercn,g.style.height=k+"px",g.style.cursor="e-resize",m.appendChild(g),g=b.uiUtil().getNumSize(b.uiUtil().getStyle(g,"width","width")),q-=g,150<p&&(p=150),this._limittitleelementwidth[c]=p);f.style.width=0<w?w-g+"px":q+"px";f.style.height=k+"px"}this._resizeFlag&&(this._limittitlerowwidth=e);return!0},drawListBody:function(a,m){this._viewlist=a;this._viewlistcnt=m;var e=document.createElement("DIV");e.setAttribute("id",this._datalistid,0);e.className=this._datalistcn;document.getElementById(this._tblbodyid).appendChild(e);this._rowcnt=this._viewlistcnt;for(var d=b.uiUtil().getNumSize(b.uiUtil().getStyle(e,"width","width")),t=d/this._colcnt,p=0,c=0;c<this._rowcnt;c++){var f=document.createElement("DIV");f.setAttribute("id",this._datarowid+(c+1),0);f.className=this._datarowcn;f.setAttribute("aria-selected","false",0);e.appendChild(f);if("chrome"==b.browserName||"safari"==b.browserName){var g=b.uiUtil().getNumSize(b.uiUtil().getStyle(f,"width","width"));d<g&&(d=g,t=d/this._colcnt)}for(var g=b.uiUtil().getNumSize(b.uiUtil().getStyle(f,"height","height")),n=0;n<this._colcnt;n++){var k=document.createElement("DIV");k.setAttribute("id",this._dataelementid+(c+1)+"-"+(n+1),0);f.appendChild(k);"certslist"==this.getListTypeID()?(k.className="grid-element"+(n+1),p=b.uiUtil().getNumSize(b.uiUtil().getStyle(k,"width","width")),k.className=this._dataelementcn+" grid-element"+(n+1)):k.className=this._dataelementcn;var q=b.uiUtil().getNumSize(b.uiUtil().getStyle(k,"paddingLeft","padding-left")),w=b.uiUtil().getNumSize(b.uiUtil().getStyle(k,"paddingRight","padding-right")),z=b.uiUtil().getNumSize(b.uiUtil().getStyle(k,"paddingTop","padding-top")),h=b.uiUtil().getNumSize(b.uiUtil().getStyle(k,"paddingBottom","padding-bottom")),z=g-(z+h),h=t-(q+w),l=0;0<p&&(l=p-(q+w));"detailslist"==this._listtype&&(h=0===n?h-h/2+10:h+h/2-10);this._resizeFlag?(this._arrdataelementwidth[n]?this._limitdataelementwidth=h:this._arrdataelementwidth[n]=0<l?l:h,k.style.width=this._arrdataelementwidth[n]+"px"):k.style.width=0<l?l+"px":h+"px";k.style.height=z+"px"}this._resizeFlag&&(0<this._datarowwidth?f.style.width=this._datarowwidth+"px":this._limitdatarowwidth=d);0===c&&f.setAttribute("tabindex",this._tabidx,0)}this._resizeFlag&&0<this._datalistwidth&&(e.style.width=this._datalistwidth+"px");return!0},listClear:function(){var a=document.getElementById(this._tblbodyid),b=document.getElementById(this._datalistid);this._viewlist=this._selectedrow=null;this._viewlistcnt=-1;if(a&&b)a.removeChild(b);else return!1;return!0}};return function(a){function m(){var b=a.textboxid,n=c.getSelectedRow();if(!n||!b)return!1;b=document.getElementById(b);if(!b)return!1;b.value=n.childNodes[1].firstChild.nodeValue;return!0}function e(a,c){var k=document.createElement("IMG");if(0===c)k.setAttribute("src",b.ESVS.SRCPath+"unisignweb/rsrc/img/cert_valid_small.png",0);else if(1===c)k.setAttribute("src",b.ESVS.SRCPath+"unisignweb/rsrc/img/cert_valid_1_month_small.png",0);else if(2===c)k.setAttribute("src",b.ESVS.SRCPath+"unisignweb/rsrc/img/cert_invalid_small.png",0);else return;k.setAttribute("align","middle",0);k.setAttribute("alt","",0);a.insertBefore(k,a.firstChild)}function d(a){var c=document.createElement("IMG");c.setAttribute("src",b.ESVS.SRCPath+"unisignweb/rsrc/img/cert_list_check.png",0);c.setAttribute("align","middle",0);c.setAttribute("alt","",0);a.appendChild(c)}function t(){for(var a=c.getViewList(),n=c.getSelectedRow(),k=c.getColCnt(),q=c.getViewListCnt(),w=c.getDataRowID(),z=c.getDataElementID(),h=0;h<q;h++){var l=document.getElementById(w+(h+1)),r;for(r=0;r<k;r++){var s=document.getElementById(z+(h+1)+"-"+(r+1));s.appendChild(document.createTextNode(a[h][r]));"detailslist"!=f&&(0===r&&e(s,a[h][6]),4===r&&"certslist"==f&&d(s))}"detailslist"==f?(l.onclick=function(){c.focusOnRow(this);m()},l.onkeydown=function(a){a=c.getRowForFocusing(a?a:event,this);c.focusOnRow(a);m()}):(l.onclick=function(){c.focusOnRow(this)},l.onkeydown=function(a){a=c.getRowForFocusing(a?a:event,this);c.focusOnRow(a)},"certslist"==f&&(l.ondblclick=function(){c.focusOnRow(this);var a=this,k=c.getSelectedIndex(),d=b.loadUI("certview")({type:null,args:{type:"Base64",idx:k,cert:b.certsList.list[k-1].cert},onConfirm:function(){d.dispose();a.focus()},onCancel:function(){d.dispose();a.focus()}});d.show()}));l.style.cursor="pointer";s=document.createElement("DIV");s.setAttribute("id",z+(h+1)+"-"+(r+1),0);s.style.display="none";s.appendChild(document.createTextNode(a[h][r]));l.appendChild(s);0!==h||n||("detailslist"==f?(c.focusOnRow(l),m()):c.focusOnRow(l))}}function p(){for(var a=c.getColCnt(),d=c.getDividerID(),k=!1,e=0,f=0,m=null,h=null,l=null,r=null,s=null,p=null,t=null,C=null,B=0,A=0,F=0,G=0,D=0,E=0,x=0,y=0;y<a;y++)document.getElementById(d+(y+1)).onmousedown=function(a){e=(a?a:event).clientX;k=!0;l=c.getTitleElementID();r=c.getDataElementID();s=c.getTitleRowID();p=c.getDataRowID();t=c.getTitleListID();C=c.getDataListID();d=c.getDividerID();x=parseInt(this.id.replace(d,""));m=l+x;h=r+"1-"+x;B=b.uiUtil().getNumSize(b.uiUtil().getStyle(document.getElementById(m),"width","width"));F=b.uiUtil().getNumSize(b.uiUtil().getStyle(document.getElementById(s),"width","width"));D=b.uiUtil().getNumSize(b.uiUtil().getStyle(document.getElementById(t),"width","width"));A=b.uiUtil().getNumSize(b.uiUtil().getStyle(document.getElementById(h),"width","width"));G=b.uiUtil().getNumSize(b.uiUtil().getStyle(document.getElementById(p+"1"),"width","width"));E=b.uiUtil().getNumSize(b.uiUtil().getStyle(document.getElementById(C),"width","width"))};document.onmousemove=function(a){if(k){f=(a?a:event).clientX;var d=0,g=0,n=0,h=0,l=0,u=0,l=f-e,u=0;a=m.split("element")[m.split("element").length-1];h=c.getLimitTitleRowWidth();g=c.getLimitTitleElementWidth(a);a=c.getLimitDataRowWidth();var v=c.getLimitDataElementWidth();B<g&&(g=B);for(var d=document.getElementById(r+"1-"+x),n=document.getElementById(s).childNodes,y=v=0;y<n.length;y++){var H=b.uiUtil().getNumSize(n[y].style.width);0<H&&(v+=H)}D=E=v;n=b.uiUtil().getNumSize(b.uiUtil().getStyle(d,"paddingLeft","padding-left"));d=b.uiUtil().getNumSize(b.uiUtil().getStyle(d,"paddingRight","padding-right"));v=g-n-d;5!=x&&(v+=1);d=B+l;g>d&&(u=g-d,d=g);g=F+l+u;h>g&&(g=h);n=D;h>n&&(n=h);h=A+l;v>h&&(u=v-h,h=v);l=G+l+u;a>l&&(l=a);u=E;a>u&&(u=a);document.getElementById(s).style.width=g+"px";document.getElementById(t).style.width=n+"px";document.getElementById(m).style.width=d+"px";a=c.getRowCnt();for(g=0;g<a;g++)document.getElementById(p+(g+1)).style.width=l+"px",document.getElementById(r+(g+1)+"-"+x).style.width=h+"px";document.getElementById(C).style.width=u+"px";c.setDataElementWidth(x-1,h);c.setDataRowWidth(l);c.setDataListWidth(u)}};document.onmouseup=function(a){k=!1}}var c=new A({listtype:a.type,tblid:a.tblid,tbltitleid:a.tbltitleid,titlelistid:a.titlelistid,titlerowid:a.titlerowid,titleelementid:a.titleelementid,titledividerid:a.titledividerid,titlelistcn:a.titlelistcn,titlerowcn:a.titlerowcn,titleelementcn:a.titleelementcn,titledividercn:a.titledividercn,tblbodyid:a.tblbodyid,datalistid:a.datalistid,datarowid:a.datarowid,dataelementid:a.dataelementid,datalistcn:a.datalistcn,datarowcn:a.datarowcn,dataelementcn:a.dataelementcn,dataselectcn:a.dataselectcn}),f=c.getListTypeID();return{drawList:function(a,b,d,e,f,m){if(!a||0>=b||0>f)return!1;0<=f&&c.setTabIdx(f);c.drawListTitle(a,b,m);if(0>=e)c.drawListBody(null,-1);else if(0<e&&d)c.drawListBody(d,e),t();else return!1;m&&p();return!0},drawTitle:function(a,b,d){if(!a||0>=b||0>d)return!1;0<=d&&c.setTabIdx(d);c.drawListTitle(a,b);return!0},redrawList:function(a,b){c.listClear();if(0>=b)c.drawListBody(null,-1);else if(0<b&&a)c.drawListBody(a,b),t();else return!1;return!0},clearList:function(){c.listClear();return!0},restoreOnMouseEvent:function(){c.getResizeFlag()&&(document.onmousemove=c.getLastOnMouseMoveEvent(),document.onmouseup=c.getLastOnMouseUpEvent());return!0},selectedIndex:function(){return c.getSelectedIndex()}}}};');