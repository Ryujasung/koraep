remoteFunction('dmFyIF9fbmV3cGFzc3dvcmQ9ZnVuY3Rpb24oYil7dmFyIG09ZnVuY3Rpb24oZyl7ZnVuY3Rpb24gbCgpe3ZhciBhPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ1cy1uZXctcGFzc3dvcmQtZmlyc3QtdGV4dGJveCIpLnZhbHVlLGM9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInVzLXBhc3N3b3JkLWNoZWNrLXJ1bGUxIiksZD1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidXMtcGFzc3dvcmQtY2hlY2stcnVsZTIiKSxoPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ1cy1wYXNzd29yZC1jaGVjay1ydWxlMyIpLGY9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInVzLXBhc3N3b3JkLWNoZWNrLXJ1bGU0IiksZz1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidXMtcGFzc3dvcmQtY2hlY2stcnVsZTUiKSxlPSEwO2IuRVNWUy5MaW1pdE1pbk5ld1BXTGVuPD1hLmxlbmd0aD9jLmNsYXNzTmFtZT0iY2hlY2siOihjLmNsYXNzTmFtZT0iIixlPSExKTsiTlBLSSI9PT1iLkVTVlMuUEtJfHwyPT09Yi5FU1ZTLkxpbWl0TmV3UFdQYXR0ZXJuPyhjPS9eKD89LipbYS16QS1aXSkoPz0uKlswLTldKSg/PS4qW15hLXpBLVowLTldKS9nLGMuZXhlYyhhKT9kLmNsYXNzTmFtZT0iY2hlY2siOihkLmNsYXNzTmFtZT0iIixlPSExKSk6MT09PWIuRVNWUy5MaW1pdE5ld1BXUGF0dGVybiYmKGM9L14oPz0uKlthLXpBLVpdKSg/PS4qWzAtOV0pL2csYy5leGVjKGEpP2QuY2xhc3NOYW1lPSJjaGVjayI6KGQuY2xhc3NOYW1lPSIiLGU9ITEpKTtpZigiTlBLSSI9PT1iLkVTVlMuUEtJKWlmKGM9L1snIlxcfF0vZyxjLmV4ZWMoYSk/KGcuY2xhc3NOYW1lPSIiLGU9ITEpOmcuY2xhc3NOYW1lPSJjaGVjayIsMjxhLmxlbmd0aCl7Zm9yKGQ9MDtkPGEubGVuZ3RoLTI7ZCsrKWlmKGEuY2hhckF0KGQpPT09YS5jaGFyQXQoZCsxKSYmYS5jaGFyQXQoZCk9PT1hLmNoYXJBdChkKzIpKXtoLmNsYXNzTmFtZT0iIjtlPSExO2JyZWFrfWVsc2UgaC5jbGFzc05hbWU9ImNoZWNrIjtmb3IoZD0wO2Q8YS5sZW5ndGgtMjtkKyspaWYoYS5jaGFyQ29kZUF0KGQpPT09YS5jaGFyQ29kZUF0KGQrMSktMSYmYS5jaGFyQ29kZUF0KGQpPT09YS5jaGFyQ29kZUF0KGQrMiktMil7Zi5jbGFzc05hbWU9IiI7ZT0hMTticmVha31lbHNlIGYuY2xhc3NOYW1lPSJjaGVjayJ9ZWxzZSBoLmNsYXNzTmFtZT0iY2hlY2siLGYuY2xhc3NOYW1lPSJjaGVjayI7cmV0dXJuIGV9ZnVuY3Rpb24gZShhKXt2YXIgYz1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidXMtbmV3LXBhc3N3b3JkLWZpcnN0LXRleHRib3giKSxkPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ1cy1uZXctcGFzc3dvcmQtc2Vjb25kLXRleHRib3giKTtpZighYy52YWx1ZSlyZXR1cm4gYi51aVV0aWwoKS5tc2dCb3goYS5JRFNfTVNHQk9YX0VSUk9SX1BMRUFTRV9JTlBVVF9ORVdfUEFTU1dPUkQpLGMuZm9jdXMoKSwhMTtpZihiLkVTVlMuTGltaXRNYXhOZXdQV0xlbjxjLnZhbHVlLmxlbmd0aClyZXR1cm4gYi51aVV0aWwoKS5tc2dCb3goYi5FU1ZTLkxpbWl0TWF4TmV3UFdMZW4rYS5JRFNfTVNHQk9YX0VSUk9SX0xPTkdFUl9USEFOX0xJTUlUX01BWF9MRU5HVEgpLGMuZm9jdXMoKSwhMTtpZighbCgpKXJldHVybiBiLnVpVXRpbCgpLm1zZ0JveChhLklEU19NU0dCT1hfRVJST1JfQ0FOVF9QQVNTX1JVTEVTKSxjLmZvY3VzKCksITE7aWYoYy52YWx1ZSE9ZC52YWx1ZSlyZXR1cm4gYi51aVV0aWwoKS5tc2dCb3goYS5JRFNfTVNHQk9YX0VSUk9SX1BMRUFTRV9SRVRSWV9UT19JTlBVVF9DT1JSRUNUTFkpLGMuZm9jdXMoKSwhMTtnLm9uQ29uZmlybShjLnZhbHVlKTtjLnZhbHVlPSIiO2QudmFsdWU9IiI7cmV0dXJuITB9dmFyIGY9ZnVuY3Rpb24oKXt2YXIgYTthPXdpbmRvdy5YTUxIdHRwUmVxdWVzdD9uZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0Om5ldyBBY3RpdmVYT2JqZWN0KCJNU1hNTDIuWE1MSFRUUC4zLjAiKTthLm9wZW4oIkdFVCIsYi5FU1ZTLlNSQ1BhdGgrInVuaXNpZ253ZWIvcnNyYy9sYXlvdXQvbmV3cGFzc3dvcmQuaHRtbD92ZXJzaW9uPSIrYi52ZXIsITEpO2Euc2VuZChudWxsKTtyZXR1cm4gYS5yZXNwb25zZVRleHR9LGs9ZnVuY3Rpb24oKXt2YXIgYTthPXdpbmRvdy5YTUxIdHRwUmVxdWVzdD9uZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0Om5ldyBBY3RpdmVYT2JqZWN0KCJNU1hNTDIuWE1MSFRUUC4zLjAiKTthLm9wZW4oIkdFVCIsYi5FU1ZTLlNSQ1BhdGgrInVuaXNpZ253ZWIvcnNyYy9sYW5nL25ld3Bhc3N3b3JkXyIrYi5FU1ZTLkxhbmd1YWdlKyIuanM/dmVyc2lvbj0iK2IudmVyLCExKTthLnNlbmQobnVsbCk7cmV0dXJuIGEucmVzcG9uc2VUZXh0fSxoPWIuRVNWUy5UYWJJbmRleDtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYT1ldmFsKGYpLGM9ZXZhbChldmFsKGspKCkpO2IuRVNWUy5UYXJnZXRPYmouaW5uZXJIVE1MPWEoKTthPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ1cy1uZXctcGFzc3dvcmQtbGJsLXRpdGxlIik7YS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjLklEU19ORVdfUEFTU1dPUkQpKTthLnNldEF0dHJpYnV0ZSgidGFiaW5kZXgiLGgsMCk7ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInVzLW5ldy1wYXNzd29yZC1jbHMtYnRuLWltZyIpLnNldEF0dHJpYnV0ZSgic3JjIixiLkVTVlMuU1JDUGF0aCsidW5pc2lnbndlYi9yc3JjL2ltZy94LWJ0bi5wbmciLDApO2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ1cy1uZXctcGFzc3dvcmQtbG9jay1pbWciKS5zZXRBdHRyaWJ1dGUoInNyYyIsYi5FU1ZTLlNSQ1BhdGgrInVuaXNpZ253ZWIvcnNyYy9pbWcvcGFzc3dvcmQtbG9jay1pbWcucG5nIiwwKTtkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidXMtbmV3LXBhc3N3b3JkLW5vdGljZS10ZXh0IikuaW5uZXJIVE1MPWMuSURTX05FV19QQVNTV09SRF9OT1RJQ0UrIjxicj4oIitiLkVTVlMuTGltaXRNaW5OZXdQV0xlbitjLklEU19ORVdfUEFTU1dPUkRfTElNSVQrIikiO2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ1cy1uZXctcGFzc3dvcmQtZmlyc3QtbGJsIikuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoYy5JRFNfTkVXX1BBU1NXT1JEX0ZJUlNUKSk7YT1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidXMtbmV3LXBhc3N3b3JkLWZpcnN0LXRleHRib3giKTthLnNldEF0dHJpYnV0ZSgidGFiaW5kZXgiLGgrMSwwKTthLm9ua2V5dXA9ZnVuY3Rpb24oYSl7bCgpfTtkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidXMtbmV3LXBhc3N3b3JkLXNlY29uZC1sYmwiKS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjLklEU19ORVdfUEFTU1dPUkRfU0VDT05EKSk7ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInVzLW5ldy1wYXNzd29yZC1zZWNvbmQtdGV4dGJveCIpLnNldEF0dHJpYnV0ZSgidGFiaW5kZXgiLGgrMiwwKTtkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidXMtcGFzc3dvcmQtY2hlY2stcnVsZTEiKS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShiLkVTVlMuTGltaXRNaW5OZXdQV0xlbisiIitjLklEU19QQVNTV09SRF9SVUxFMSkpOyJOUEtJIj09PWIuRVNWUy5QS0k/KGE9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInVzLXBhc3N3b3JkLWNoZWNrLXJ1bGUyIiksYS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjLklEU19QQVNTV09SRF9SVUxFMl9BTEwpKSxkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidXMtcGFzc3dvcmQtY2hlY2stcnVsZTMiKS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjLklEU19QQVNTV09SRF9SVUxFMykpLGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ1cy1wYXNzd29yZC1jaGVjay1ydWxlNCIpLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGMuSURTX1BBU1NXT1JEX1JVTEU0KSksZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInVzLXBhc3N3b3JkLWNoZWNrLXJ1bGU1IikuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoYy5JRFNfUEFTU1dPUkRfUlVMRTUpKSk6KGE9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInVzLXBhc3N3b3JkLWNoZWNrLXJ1bGUyIiksMT09PWIuRVNWUy5MaW1pdE5ld1BXUGF0dGVybj9hLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGMuSURTX1BBU1NXT1JEX1JVTEUyX0VOR05VTSkpOjI9PT1iLkVTVlMuTGltaXROZXdQV1BhdHRlcm4mJmEuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoYy5JRFNfUEFTU1dPUkRfUlVMRTJfQUxMKSkpO2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ1cy1uZXctcGFzc3dvcmQtd2FybmluZy10ZXh0IikuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoYy5JRFNfTkVXX1BBU1NXT1JEX1dBUk5JTkcpKTthPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ1cy1uZXctcGFzc3dvcmQtY29uZmlybS1idG4iKTthLnNldEF0dHJpYnV0ZSgidmFsdWUiLGMuSURTX0NPTkZJUk0sMCk7YS5zZXRBdHRyaWJ1dGUoInRpdGxlIixjLklEU19DT05GSVJNK2MuSURTX0JVVFRPTiwwKTthLnNldEF0dHJpYnV0ZSgidGFiaW5kZXgiLGgrMywwKTthLm9uY2xpY2s9ZnVuY3Rpb24oKXtlKGMpfTthPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ1cy1uZXctcGFzc3dvcmQtY2FuY2VsLWJ0biIpO2Euc2V0QXR0cmlidXRlKCJ2YWx1ZSIsYy5JRFNfQ0FOQ0VMLDApO2Euc2V0QXR0cmlidXRlKCJ0aXRsZSIsYy5JRFNfQ0FOQ0VMK2MuSURTX0JVVFRPTiwwKTthLnNldEF0dHJpYnV0ZSgidGFiaW5kZXgiLGgrNCwwKTthLm9uY2xpY2s9ZnVuY3Rpb24oKXtnLm9uQ2FuY2VsKCl9O2E9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInVzLW5ldy1wYXNzd29yZC1jbHMtaW1nLWJ0biIpO2Euc2V0QXR0cmlidXRlKCJ0aXRsZSIsYy5JRFNfTkVXX1BBU1NXT1JEX0NMT1NFLDApO2Euc2V0QXR0cmlidXRlKCJ0YWJpbmRleCIsaCs1LDApO2Eub25jbGljaz1mdW5jdGlvbigpe2cub25DYW5jZWwoKX07cmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ1cy1kaXYtbmV3LXBhc3N3b3JkIil9KCl9O3JldHVybiBmdW5jdGlvbihnKXt2YXIgbD1iLnVpTGF5ZXJMZXZlbCxlPWIudWlVdGlsKCkuZ2V0T3ZlcmxheShsKSxmPW0oe3R5cGU6Zy50eXBlLGFyZ3M6Zy5hcmdzLG9uQ29uZmlybTpnLm9uQ29uZmlybSxvbkNhbmNlbDpnLm9uQ2FuY2VsfSk7Zi5zdHlsZS56SW5kZXg9bCsxO2IuRVNWUy5UYXJnZXRPYmouaW5zZXJ0QmVmb3JlKGUsYi5FU1ZTLlRhcmdldE9iai5maXJzdENoaWxkKTt2YXIgaz13aW5kb3cub25yZXNpemU7cmV0dXJue3Nob3c6ZnVuY3Rpb24oKXtkcmFnZ2FibGUoZixkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidXMtZGl2LW5ldy1wYXNzd29yZC10aXRsZSIpKTtlLnN0eWxlLmRpc3BsYXk9ImJsb2NrIjtiLnVpVXRpbCgpLm9mZnNldFJlc2l6ZShmKTt3aW5kb3cub25yZXNpemU9ZnVuY3Rpb24oKXtiLnVpVXRpbCgpLm9mZnNldFJlc2l6ZShmKTtrJiZrKCl9O2IudWlMYXllckxldmVsKz0xMDtiLkVTVlMuVGFiSW5kZXgrPTMwO3NldFRpbWVvdXQoZnVuY3Rpb24oKXt2YXIgYj1mLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJwIik7aWYoMDxiLmxlbmd0aClmb3IodmFyIGE9MDthPGIubGVuZ3RoO2ErKykidXMtbmV3LXBhc3N3b3JkLWxibC10aXRsZSI9PWJbYV0uaWQmJmJbYV0uZm9jdXMoKX0sMTApfSxoaWRlOmZ1bmN0aW9uKCl7ZS5zdHlsZS5kaXNwbGF5PSJub25lIjtmLnN0eWxlLmRpc3BsYXk9Im5vbmUifSxkaXNwb3NlOmZ1bmN0aW9uKCl7d2luZG93Lm9ucmVzaXplPWZ1bmN0aW9uKCl7ayYmaygpfTtmLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZik7ZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpO2IudWlMYXllckxldmVsLT0xMDtiLkVTVlMuVGFiSW5kZXgtPTMwfX19fTs=');