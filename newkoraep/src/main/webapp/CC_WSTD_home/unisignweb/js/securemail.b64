remoteFunction('dmFyIF9fc2VjdXJlbWFpbCA9IGZ1bmN0aW9uKCBTQU5EQk9YICkgewl2YXIgQ29uc3RydWN0U2NyZWVuID0gZnVuY3Rpb24oIFBhcmFtICkgewkJCXZhciBfX1VJRWxlbWVudCA9IHsJCQlfX0xheW91dDogZnVuY3Rpb24oKSB7CQkJCXZhciByZXE7CQkJCQlpZiAoIHdpbmRvdy5YTUxIdHRwUmVxdWVzdCApIHsJCQkJCXJlcSA9IG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3Q7CQkJCX0gZWxzZSB7CQkJCQlyZXEgPSBuZXcgQWN0aXZlWE9iamVjdCgnTVNYTUwyLlhNTEhUVFAuMy4wJyk7CQkJCX0JCQkJCQkJCXJlcS5vcGVuKCdHRVQnLCBTQU5EQk9YLkVTVlMuU1JDUGF0aCArICd1bmlzaWdud2ViL3JzcmMvbGF5b3V0L3NlY3VyZW1haWwuaHRtbD92ZXJzaW9uPScgKyBTQU5EQk9YLnZlciwgZmFsc2UpOwkJCQlyZXEuc2VuZChudWxsKTsJCQkJCQkJCXJldHVybiByZXEucmVzcG9uc2VUZXh0OwkJCX0sCQkJX19MYW5nOiBmdW5jdGlvbigpIHsJCQkJdmFyIHJlcTsgCQkJCQkJCQlpZiAoIHdpbmRvdy5YTUxIdHRwUmVxdWVzdCApIHsgCQkJCQlyZXEgPSBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0OyAJCQkJfSBlbHNlIHsgCQkJCQlyZXEgPSBuZXcgQWN0aXZlWE9iamVjdCgnTVNYTUwyLlhNTEhUVFAuMy4wJyk7IAkJCQl9CQkJCQkJCQlyZXEub3BlbignR0VUJywgU0FOREJPWC5FU1ZTLlNSQ1BhdGggKyAndW5pc2lnbndlYi9yc3JjL2xhbmcvc2VjdXJlbWFpbF8nICsgU0FOREJPWC5FU1ZTLkxhbmd1YWdlICsgJy5qcz92ZXJzaW9uPScgKyBTQU5EQk9YLnZlciwgZmFsc2UpOwkJCQlyZXEuc2VuZChudWxsKTsJCQkJCQkJCXJldHVybiByZXEucmVzcG9uc2VUZXh0OwkJCX0JCX07CQkJCXZhciBfX1RhYkluZGV4ID0gU0FOREJPWC5FU1ZTLlRhYkluZGV4OwkJCQlmdW5jdGlvbiBVSUxvYWQoIGZvcm0gKSB7CQkJaWYgKCAhZm9ybSApIHsJCQkJYWxlcnQoJ1VJIGxvYWQgZXJyb3IuJyk7CQkJCXJldHVybiBmYWxzZTsJCQl9CQkJCQkJdmFyIHRvcEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsJCQlkb2N1bWVudC5ib2R5Lmluc2VydEJlZm9yZSggdG9wRWxlbWVudCwgZG9jdW1lbnQuYm9keS5maXJzdENoaWxkICk7CQkJdG9wRWxlbWVudC5pbm5lckhUTUwgPSBmb3JtOwkJCXJldHVybiB0cnVlOwkJfQkJCQlmdW5jdGlvbiBXaW5kb3dDb25maXJtKF9fbGFuZykgewkJCVBhcmFtLm9uQ29uZmlybShQYXJhbS5hcmdzLmFsZ29yaXRobSwgUGFyYW0uYXJncy5kYXRhLCBfX2xhbmcsIFBhcmFtLmFyZ3MuZGVjcnlwdERhdGEpOwkJfQkJCQlmdW5jdGlvbiBXaW5kb3dFeGl0KCkgewkJCVBhcmFtLm9uQ2FuY2VsKCk7CQl9CQkJCWZ1bmN0aW9uIFdpbmRvd0dlbmVyYXRlKCkgewkJCXZhciBfX2Zvcm0gPSBldmFsKF9fVUlFbGVtZW50Ll9fTGF5b3V0KTsJCQl2YXIgX19sYW5nID0gZXZhbCgoZXZhbChfX1VJRWxlbWVudC5fX0xhbmcpKSgpKTsJCQkJCQkvLyBzaG91bGQgYmUgY2hhbmdlZCBhc2FwCQkJVUlMb2FkKCBfX2Zvcm0oKSApOwkJCS8vIHNob3VsZCBiZSBjaGFuZ2VkIGFzYXAJCQkJCQl2YXIgdGl0bGVMYmwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndXMtc2VjdXJlLW1haWwtbGJsLXRpdGxlJyk7CQkJdGl0bGVMYmwuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoX19sYW5nLklEU19LRVlfVFlQRTJbUGFyYW0uYXJncy5tb2RlXSArIF9fbGFuZy5JRFNfUEFTU1dPUkRfVElUTEUpKTsJCQkJCQl2YXIgbG9nb0ltZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1cy1jZXJ0LW1hbmFnZS1sb2dvLWltZycpOwkJCWxvZ29JbWcuc2V0QXR0cmlidXRlKCdhbHQnLCBfX2xhbmcuSURTX0xPR08sIDApOwkJCWxvZ29JbWcuc2V0QXR0cmlidXRlKCdzcmMnLCBTQU5EQk9YLkVTVlMuU1JDUGF0aCArICd1bmlzaWdud2ViL3JzcmMvaW1nL3NlY3VyZW1haWxfdGl0bGUuanBnJywgMCk7CQkJCQkJdmFyIHBhc3N3b3JkSW1nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VzLXNlY3VyZS1tYWlsLWxvY2staW1nJyk7CQkJcGFzc3dvcmRJbWcuc2V0QXR0cmlidXRlKCdhbHQnLCBfX2xhbmcuSURTX1BXRF9JTUcsIDApOwkJCXBhc3N3b3JkSW1nLnNldEF0dHJpYnV0ZSgnc3JjJywgU0FOREJPWC5FU1ZTLlNSQ1BhdGggKyAndW5pc2lnbndlYi9yc3JjL2ltZy9wYXNzd2QucG5nJywgMCk7CQkJCQkJdmFyIGNvbnRlbnRMYmwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndXMtZGl2LXNlY3VyZS1tYWlsLWNvbnRlbnQnKTsJCQljb250ZW50TGJsLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKF9fbGFuZy5JRFNfUE9QVVBfTEVUVEVSKSk7CQkJY29udGVudExibC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJiciIpKTsJCQljb250ZW50TGJsLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKF9fbGFuZy5JRFNfUE9QVVBfTEVUVEVSMiArIF9fbGFuZy5JRFNfS0VZX1RZUEVbUGFyYW0uYXJncy5tb2RlXSArIF9fbGFuZy5JRFNfUE9QVVBfTEVUVEVSMykpOwkJCQkJCXZhciBlbnRlckxibCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1cy1kaXYtc2VjdXJlLW1haWwtaW5wdXQtbGJsJyk7CQkJZW50ZXJMYmwuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoX19sYW5nLklEU19LRVlfVFlQRVtQYXJhbS5hcmdzLm1vZGVdK19fbGFuZy5JRFNfRU5URVJfU1RSSU5HKSk7CQkJCQkJdmFyIG9rQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VzLXNlY3VyZS1tYWlsLWNvbmZpcm0tYnRuJyk7CQkJb2tCdG4uc2V0QXR0cmlidXRlKCd2YWx1ZScsIF9fbGFuZy5JRFNfQlROX09LLCAwKTsJCQlva0J0bi5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgX19sYW5nLklEU19CVE5fT0sgKyBfX2xhbmcuSURTX0JVVFRPTiwgMCk7CQkJb2tCdG4uc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsIF9fVGFiSW5kZXggKyAxLCAwKTsJCQlva0J0bi5vbmNsaWNrID0gZnVuY3Rpb24oKXsgV2luZG93Q29uZmlybShfX2xhbmcpOyB9OwkJCQkJCXZhciBjYW5jZWxCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndXMtc2VjdXJlLW1haWwtY2FuY2VsLWJ0bicpOwkJCWNhbmNlbEJ0bi5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgX19sYW5nLklEU19CVE5fQ0FOQ0VMLCAwKTsJCQljYW5jZWxCdG4uc2V0QXR0cmlidXRlKCd0aXRsZScsIF9fbGFuZy5JRFNfQlROX0NBTkNFTCArIF9fbGFuZy5JRFNfQlVUVE9OLCAwKTsJCQljYW5jZWxCdG4uc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsIF9fVGFiSW5kZXggKyAyLCAwKTsJCQljYW5jZWxCdG4ub25jbGljayA9IGZ1bmN0aW9uKCl7IFdpbmRvd0V4aXQoKTsgfTsJCQkJCQl2YXIgY2xvc2VCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndXMtc2VjdXJlLW1haWwtY2xzLWltZy1idG4nKTsJCQljbG9zZUJ0bi5zZXRBdHRyaWJ1dGUoJ2FsdCcsIF9fbGFuZy5JRFNfQ0VSVF9WSUVXX0NMT1NFLCAwKTsJCQljbG9zZUJ0bi5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgX19UYWJJbmRleCArIDMsIDApOwkJCWNsb3NlQnRuLm9uY2xpY2sgPSBmdW5jdGlvbigpeyBXaW5kb3dFeGl0KCk7IH07CQkJCQkJdmFyIGNsb3NlSW1nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VzLXNlY3VyZS1tYWlsLWNscy1idG4taW1nJyk7CQkJY2xvc2VJbWcuc2V0QXR0cmlidXRlKCdhbHQnLCBfX2xhbmcuSURTX0NFUlRfVklFV19DTE9TRSwgMCk7CQkJY2xvc2VJbWcuc2V0QXR0cmlidXRlKCdzcmMnLCBTQU5EQk9YLkVTVlMuU1JDUGF0aCArICd1bmlzaWdud2ViL3JzcmMvaW1nL3gtYnRuLnBuZycsIDApOwkJCQkJCXZhciBwYXNzd2QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndXMtaW5wdXQtc2VjdXJlLW1haWwtcGFzc3dvcmQnKTsJCQlwYXNzd2Quc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsIF9fVGFiSW5kZXgsIDApOwkJCXBhc3N3ZC5mb2N1cygpOwkJCXBhc3N3ZC5vbmtleWRvd24gPSBmdW5jdGlvbihlKXsJCQkJaWYoZSAhPSBudWxsICYmIGUgIT0gJ3VuZGVmaW5lZCcgJiYgZS5rZXlDb2RlID09IDEzKXsJCQkJCVdpbmRvd0NvbmZpcm0oX19sYW5nKTsJCQkJfQkJCX07CQkJCQkJcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1cy1kaXYtc2VjdXJlLW1haWwnKTsJCX0JCQkJcmV0dXJuIFdpbmRvd0dlbmVyYXRlKCk7CX07CQlyZXR1cm4gZnVuY3Rpb24oIFBhcmFtICkgewkJdmFyIGxheWVyTGV2ZWwgPSBTQU5EQk9YLnVpTGF5ZXJMZXZlbDsJCXZhciBvdmVybGF5ID0gU0FOREJPWC51aVV0aWwoKS5nZXRPdmVybGF5KGxheWVyTGV2ZWwvKiwgU0FOREJPWC5icm93c2VyTmFtZSwgU0FOREJPWC5icm93c2VyVmVyc2lvbiovKTsJCXZhciB3aW4gPSBDb25zdHJ1Y3RTY3JlZW4oewkJCXR5cGU6IFBhcmFtLnR5cGUsCQkJYXJnczogUGFyYW0uYXJncywJCQlvbkNvbmZpcm06IFBhcmFtLm9uQ29uZmlybSwJCQlvbkNhbmNlbDogUGFyYW0ub25DYW5jZWwJCX0pOwkJd2luLnN0eWxlLnpJbmRleCA9IGxheWVyTGV2ZWwgKyAxOwkJU0FOREJPWC5FU1ZTLlRhcmdldE9iai5pbnNlcnRCZWZvcmUoIG92ZXJsYXksIFNBTkRCT1guRVNWUy5UYXJnZXRPYmouZmlyc3RDaGlsZCApOyAgLy9mb3IgdGVzdAkJCQlmdW5jdGlvbiBmaXNydEZvY3VzKCkgewkJCXZhciBkaXZzID0gd2luLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJkaXYiKTsJCQkJCQlpZiAoIDAgPCBkaXZzLmxlbmd0aCApIHsJCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgZGl2cy5sZW5ndGg7IGkrKyApIHsJCQkJCWlmICggJ3VzLXN3LWluZm8tbGJsJyA9PSBkaXZzWyBpIF0uaWQgKSB7CQkJCQkJZGl2c1sgaSBdLmZvY3VzKCk7CQkJCQl9CQkJCX0JCQl9CQl9CQkJCXJldHVybiB7CQkJc2hvdzogZnVuY3Rpb24oKSB7CQkJCWRyYWdnYWJsZSh3aW4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1cy1kaXYtc2VjdXJlLW1haWwtdGl0bGUnKSk7CQkJCQkJCQlvdmVybGF5LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwkJCQl3aW4uc3R5bGUudG9wID0gU0FOREJPWC51aVV0aWwoKS5nZXRTY3JvbGxUb3AoKSArICgoU0FOREJPWC51aVV0aWwoKS5nZXRWaWV3cG9ydEhlaWdodCgpIC0gU0FOREJPWC51aVV0aWwoKS5nZXROdW1TaXplKFNBTkRCT1gudWlVdGlsKCkuZ2V0U3R5bGUod2luLCAnaGVpZ2h0JywgJ2hlaWdodCcpKSkgLyAzKSArICdweCc7CQkJCXdpbi5zdHlsZS5sZWZ0ID0gU0FOREJPWC51aVV0aWwoKS5nZXRTY3JvbGxMZWZ0KCkgKyAoKFNBTkRCT1gudWlVdGlsKCkuZ2V0Vmlld3BvcnRXaWR0aCgpIC0gU0FOREJPWC51aVV0aWwoKS5nZXROdW1TaXplKFNBTkRCT1gudWlVdGlsKCkuZ2V0U3R5bGUod2luLCAnd2lkdGgnLCAnd2lkdGgnKSkpIC8gMikgKyAncHgnOwkJCQl3aW4uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7CQkJCQkJCQlTQU5EQk9YLnVpTGF5ZXJMZXZlbCArPSAxMDsJCQkJU0FOREJPWC5FU1ZTLlRhYkluZGV4ICs9IDIwOwkJCQlzZXRUaW1lb3V0KCBmdW5jdGlvbigpeyBmaXNydEZvY3VzKCk7IH0sIDEwICk7CQkJfSwJCQkJCQloaWRlOiBmdW5jdGlvbigpIHsJCQkJb3ZlcmxheS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwkJCQl3aW4uc3R5bGUuZGlzcGxheSA9ICdub25lJzsJCQl9LAkJCQkJCWRpc3Bvc2U6IGZ1bmN0aW9uKCkgewkJCQl2YXIgYm9keSA9IHdpbi5wYXJlbnROb2RlLnBhcmVudE5vZGU7CQkJCWJvZHkucmVtb3ZlQ2hpbGQod2luLnBhcmVudE5vZGUpOyAgLy9wYXJlbnQucmVtb3ZlQ2hpbGQod2luKTsJCQkJb3ZlcmxheS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG92ZXJsYXkpOwkJCQlTQU5EQk9YLnVpTGF5ZXJMZXZlbCAtPSAxMDsJCQkJU0FOREJPWC5FU1ZTLlRhYkluZGV4IC09IDIwOwkJCX0JCX07CX19Ow==');